@model TspModel
@{
    ViewData["Title"] = "Задача коммивояжера ГА";
}

<style>
	html,
	body,
	#container {
		margin: 0;
		width: 100%;
		height: 100%;
		overflow: hidden;
	}

	#reset {
		padding: 4px 10px;
		background: #00a81f;
		border-radius: 4px;
		box-shadow: 0 1px 3px 0 rgba(38, 38, 38, 0.5);
		border: none;
		color: #fff;
		font-size: 13px;
		cursor: pointer;
	}

		#reset:disabled {
			background: #f2f2f2;
			color: #6e6d6d;
			cursor: default;
		}
</style>

<div id="container"></div>
@using (Html.BeginForm("Index", "GeneticAlgorithm", FormMethod.Post, new { id = "tspStart" }))
{
    <script src="https://mapgl.2gis.com/api/js/v1"></script>
    <script src="https://unpkg.com/%402gis/mapgl-directions%40%5e2/dist/directions.js"></script>
    <script>
		const map = new mapgl.Map('container', {
			center: [parseFloat(@Model.CenterX), parseFloat(@Model.CenterY)],
			zoom: parseInt(@Model.Zoom),
			key: 'bfd8bbca-8abf-11ea-b033-5fa57aae2de7',
		});
		const markers = [];
		const points = JSON.parse('@Html.Raw(Model.Points)');

		let drew = false;
		const buttonText = ['Построить маршрут'];
		const controlsHtml = `<button id="reset">${buttonText[0]}</button> `;
		new mapgl.Control(map, controlsHtml, {
			position: 'bottomLeft',
		});

		const resetButton = document.getElementById('reset');
		resetButton.disabled = false;

		resetButton.addEventListener('click', function () {
			document.getElementById("tspCenterX").value = map.getCenter()[0];
            document.getElementById("tspCenterY").value = map.getCenter()[1];
            document.getElementById("tspZoom").value = map.getZoom();
            document.getElementById("tspShowRoad").value = "true";
            document.getElementById("tspPoints").value = points;
            document.getElementById("tspSubmiter").click();
		});

		map.on('click', (e) => {
			const coords = e.lngLat;
			markers.push(
            	new mapgl.Marker(map, {
            		coordinates: coords,
            		icon: 'https://docs.2gis.com/img/dotMarker.svg',
            	})
            );
            
           	points.push(coords);
		});

		if ('@Model.ShowRoad' == 'true') {
			const directions = new mapgl.Directions(map, {
				directionsApiKey: 'rurbbn3446',
			});

			directions.carRoute({
				points: points,
			});
			markers.forEach((m) => {
				m.destroy();
			});
		}
	</script>

    @Html.HiddenFor(m => m.CenterX, new { id = "tspCenterX" })
    ;
    @Html.HiddenFor(m => m.CenterY, new { id = "tspCenterY" })
    ;
    @Html.HiddenFor(m => m.Zoom, new { id = "tspZoom" })
    ;
    @Html.HiddenFor(m => m.ShowRoad, new { id = "tspShowRoad" })
    ;
    @Html.HiddenFor(m => m.Points, new { id = "tspPoints" })
    ;

    <input type="submit" id="tspSubmiter" hidden/>
}
@using (Html.BeginForm("Index", "GeneticAlgorithm", FormMethod.Get))
{
    <input type="submit" id="resetSubmiter" hidden/>
}